{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/webapps/latin_library/frontend/src/Components/SearchForText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Autocomplete, Button, Typography, TextField, Grid } from '@material-ui/core';\nimport './Styling/SearchText.css'; // Import CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchForText = () => {\n  _s();\n  const [authors, setAuthors] = useState([]);\n  const [works, setWorks] = useState([]);\n  const [selectedAuthor, setSelectedAuthor] = useState(null);\n  const [selectedWork, setSelectedWork] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    const fetchAuthorsAndWorks = async () => {\n      try {\n        const authorsResponse = await fetch('/api/authors');\n        const worksResponse = await fetch('/api/works');\n        const authorsData = await authorsResponse.json();\n        const worksData = await worksResponse.json();\n        setAuthors(authorsData);\n        setWorks(worksData);\n      } catch (error) {\n        console.error('Error fetching authors and works:', error);\n      }\n    };\n    fetchAuthorsAndWorks();\n  }, []);\n  const handleSearch = async () => {\n    if (!selectedAuthor || !selectedWork) {\n      setErrorMessage('Please select an author and a work.');\n      return;\n    }\n    try {\n      const response = await fetch(`/api/search?author=${selectedAuthor}&work=${selectedWork}`);\n      const data = await response.json();\n      setSearchResults(data);\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error searching:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-text-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      children: \"Search Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: authors,\n          getOptionLabel: option => option.name,\n          value: selectedAuthor,\n          onChange: (event, newValue) => setSelectedAuthor(newValue),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: \"Search by Author\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: works,\n          getOptionLabel: option => option.title,\n          value: selectedWork,\n          onChange: (event, newValue) => setSelectedWork(newValue),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: \"Search by Work\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSearch,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"error-message\",\n          color: \"error\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: searchResults.map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: result.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: result.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, result._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchForText, \"ofaYWWNkv+tY92Os8SOuFVu7jb0=\");\n_c = SearchForText;\nexport default SearchForText;\nvar _c;\n$RefreshReg$(_c, \"SearchForText\");","map":{"version":3,"names":["React","useState","useEffect","Autocomplete","Button","Typography","TextField","Grid","jsxDEV","_jsxDEV","SearchForText","_s","authors","setAuthors","works","setWorks","selectedAuthor","setSelectedAuthor","selectedWork","setSelectedWork","searchResults","setSearchResults","errorMessage","setErrorMessage","fetchAuthorsAndWorks","authorsResponse","fetch","worksResponse","authorsData","json","worksData","error","console","handleSearch","response","data","className","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","alignItems","item","xs","options","getOptionLabel","option","name","value","onChange","event","newValue","renderInput","params","label","title","color","onClick","map","result","text","_id","_c","$RefreshReg$"],"sources":["/Users/sam/Desktop/webapps/latin_library/frontend/src/Components/SearchForText.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Autocomplete, Button, Typography, TextField, Grid } from '@material-ui/core';\nimport './Styling/SearchText.css'; // Import CSS file for styling\n\nconst SearchForText = () => {\n  const [authors, setAuthors] = useState([]);\n  const [works, setWorks] = useState([]);\n  const [selectedAuthor, setSelectedAuthor] = useState(null);\n  const [selectedWork, setSelectedWork] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const fetchAuthorsAndWorks = async () => {\n      try {\n        const authorsResponse = await fetch('/api/authors');\n        const worksResponse = await fetch('/api/works');\n        const authorsData = await authorsResponse.json();\n        const worksData = await worksResponse.json();\n        setAuthors(authorsData);\n        setWorks(worksData);\n      } catch (error) {\n        console.error('Error fetching authors and works:', error);\n      }\n    };\n    fetchAuthorsAndWorks();\n  }, []);\n\n  const handleSearch = async () => {\n    if (!selectedAuthor || !selectedWork) {\n      setErrorMessage('Please select an author and a work.');\n      return;\n    }\n    try {\n      const response = await fetch(`/api/search?author=${selectedAuthor}&work=${selectedWork}`);\n      const data = await response.json();\n      setSearchResults(data);\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error searching:', error);\n    }\n  };\n\n  return (\n    <div className=\"search-text-container\"> {/* Apply CSS class for styling */}\n      <Typography variant=\"h2\">Search Text</Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={6}>\n          <Autocomplete\n            options={authors}\n            getOptionLabel={(option) => option.name}\n            value={selectedAuthor}\n            onChange={(event, newValue) => setSelectedAuthor(newValue)}\n            renderInput={(params) => <TextField {...params} label=\"Search by Author\" variant=\"outlined\" />}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <Autocomplete\n            options={works}\n            getOptionLabel={(option) => option.title}\n            value={selectedWork}\n            onChange={(event, newValue) => setSelectedWork(newValue)}\n            renderInput={(params) => <TextField {...params} label=\"Search by Work\" variant=\"outlined\" />}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\n          {errorMessage && <Typography className=\"error-message\" color=\"error\">{errorMessage}</Typography>}\n        </Grid>\n      </Grid>\n      <div>\n        {searchResults.map((result) => (\n          <div key={result._id}>\n            <Typography variant=\"h3\">{result.title}</Typography>\n            <Typography>{result.text}</Typography>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchForText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}